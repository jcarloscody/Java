AVISO
-> a partir do java 8, interfaces podem ter "default methods" ou "defender methods"



INTERFACES:
-> É um tipo que define um conjunto de operações que uma classe deve implementar. em grosso modo é como se fosse uma classe abstrata que
tem somente methods e todos os methods sao abstratos 
-> a interfaces estabelece um CONTRATO que a classe deve cumprir 
-> PQ? para criar sistemas com baixo acoplamento e flexiveis


PROBLEMA
Uma locadora brasileira de carros cobra um valor por hora para locações de até
12 horas. Porém, se a duração da locação ultrapassar 12 horas, a locação será
cobrada com base em um valor diário. Além do valor da locação, é acrescido no
preço o valor do imposto conforme regras do país que, no caso do Brasil, é 20%
para valores até 100.00, ou 15% para valores acima de 100.00. Fazer um
programa que lê os dados da locação (modelo do carro, instante inicial e final da
locação), bem como o valor por hora e o valor diário de locação. O programa
deve então gerar a nota de pagamento (contendo valor da locação, valor do
imposto e valor total do pagamento) e informar os dados na tela. Veja os
exemplos.

Vehicle - veiculo
Invoice - fatura
car rental - aluguel de carro


INVERSÃO DE CONTROLE: padrao de desenvolvimento que consiste em retirar da classe a responsabilidade de instanciar
suas dependencias

INJEÇÃO DE DEPENDENCIAS: é a forma de realizar a inversõa de controle: um componente externo instancia a dependencia,
que é então injetada no objeto "pai". pode ser implementada de várias formas:
    - Contrutor
    - class de instanciacao (builder/factory)
    - container / framework




ASPECTOS COMUNS ENTRE HERANÇA E INTERFACES
    -> Relacao é-um: 
    -> Generalização/especialização
    -> Polimorfismo


DIFERENÇAS ENTRE HERANÇA E INTERFACES
    -> HERANÇA => reuso, reusa os metodos e atributos
    -> INTERFACES => contrato a ser cumprido. a class que implementa uma interface deve cumprir o contrato e não
    , ou seja, não há reuso. deve implementar os metodos da interface, apenas isso.





HERANÇA MULTIPLA E O PROBLEMA DO DIAMANTE
    -> a HERANÇA MULTIPLA pode gerar o PROBLEMA do DIAMANTE: uma ambiguidade causada pela existencia do mesmo
    metodo em mais de uma superclasse
    -> herança multipla nao é permitida na maioria das linguagens
    -> na linguagens java não é permitido
    -> proibido:  extends class1, class2
    -> agora quando se trata de interface é permitido implementar mais de uma interface
    -> permitido: implements interface1, interface2, interface3
    -> permitido herdar classe e implementar interface ao mesmo tempo
    -> extends class1 implements interface1, interface2, interface3


INTERFACE COMPARABLE
    -> na aplicacao


DEFAULT METHODS - defender methods
    -> a partir do java 8 interface podem conter methods concretos
    -> a intencao basica é prover implementacao padrao para methods de modo a evitar:
        -> repeticao de implementacao em toda a classe que implemente a interface
        -> a necessidade de se criar classes abstratas para prover reuso da implementacao
    -> outras vantagens:
        -> manter a retrocompatibilidade com sistemas existentes 
        -> permitir que interface funcionais (que devem conter apenas um metodo ) possam prover
        outras operações padrao reutilizaveis
    -> Com o default methods temos uma forma de herança multipla:
        -> Atenção - problema do DIAMANTE: o compilador vai reclamar se houver um metodo com a mesma assinatura
        , obrigando a sobrescreve-lo

